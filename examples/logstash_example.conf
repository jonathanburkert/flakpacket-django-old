
filter {
  if [event_type] == "alert" {
    # Adding alert_uid so we can find the event in Elasticsearch to update
    uuid {
      target => "alert_uid"
    }

    # Creating a clone with type set to "osquery_alert"
    clone { clones => ["osquery_alert"] }

    if [type] == "osquery_alert" {
      mutate {
        # Creating the field "secret" only on the event that will be sent
        # to Flakpacket's alert endpoint, secret is currently statically
        # set to "password"
        add_field => { "secret" => "password" }
      }
    }
  }
}


# Output alerts to the alert endpoint for processing

output {
  if [type] == "osquery_alert" {
    # Sending a clone of every alert to Flakpacket's alert endpoint
    http {
      # This path references the certificate.crt file created on the Flakpacket
      # host
      cacert => "/etc/logstash/conf.d/certs/certificate.crt"
      http_method => "post"
      # Should work but gave errors in logstash 2.3.4, trying to prevent stalling
      # the logstash pipeline indefinitely if the Flakpacket alert endpoint does
      # not respond
#      retry_failed => false
      # Flakpacket's alert endpoint
      url => "https://192.168.254.70:8000/flakpacket/osquery/alert"
    }
  }
}


# Ensure events are not also sent to elasticsearch

output {
  # Add conditional to the elasticsearch output to ensure the "osquery_alert" events
  # are not also indexed
  if [type] == "suricata" {
    if [event_type] and [event_type] != 'stats' {
      elasticsearch {
        hosts => "127.0.0.1"
        index => "logstash-%{event_type}-%{+YYYY.MM.dd}"
      }
    } else {
      elasticsearch {
        hosts => "127.0.0.1"
        index => "logstash-%{+YYYY.MM.dd}"
      }
    }
  } 
}

